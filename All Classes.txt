package com.example.project;


import javax.servlet.http.*;
import org.springframework.security.web.authentication.www.*;
import org.springframework.security.core.*;
import java.io.*;
import javax.servlet.*;
import org.springframework.stereotype.*;

@Component
public class AuthenticationEntryPoint extends BasicAuthenticationEntryPoint {

@Override

    public void commence(HttpServletRequest request, HttpServletResponse response,
    AuthenticationException authEx)

      throws IOException, ServletException {

        response.addHeader("LoginUser", "Basic " + getRealmName());

        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);

        PrintWriter writer = response.getWriter();

        writer.println("HTTP Status 401 - " + authEx.getMessage());

    }

	

	@Override

    public void afterPropertiesSet() throws Exception {

        setRealmName("springboot");

        super.afterPropertiesSet();

    }

}



package com.example.project;
import javax.persistence.*;


@Entity
public class Hospital {
	 
	 @Id
	  public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getCity() {
		return city;
	}
	public void setCity(String city) {
		this.city = city;
	}
	public double getRating() {
		return rating;
	}
	public void setRating(double rating) {
		this.rating = rating;
	}
	private int id;
	  private String name;
	  private String city;
	  private double rating;
	  
	 

	}



package com.example.project;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import javax.persistence.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;

@RestController

@RequestMapping("/test/")
public class HospitalController {

    @Autowired
    private HospitalService hospitalService;
    /*private EntityManager em;
    
    public HospitalController(){
        EntityManagerFactory emf = Persistence.createEntityManagerFactory("hospitalService");
        em = emf.createEntityManager();
        hospitalService = new HospitalService(em);

        em.getTransaction().begin();
    }*/

@RequestMapping(value="/hospitals/{id}", method = RequestMethod.GET)
public @ResponseBody Hospital getHospital(@PathVariable("id") int id) throws Exception {
        return hospitalService.findHospital(id);
    }

@RequestMapping(value="/hospitals", method = RequestMethod.GET)
public @ResponseBody Iterable<Hospital> getAllHospitals() throws Exception {
		return hospitalService.getAllHospitals();
    }


@RequestMapping(value="/hospitals", method = RequestMethod.POST)
public ResponseEntity<String> addHospital(@RequestBody Hospital hospital  ) {
    hospitalService.addHospital(hospital);
	return null;
}

@RequestMapping(value="/hospitals", method = RequestMethod.PUT)
public ResponseEntity<String> updateHospital(@RequestBody Hospital hospital) {
	hospitalService.updateHospital(hospital);
	return null;
}

@RequestMapping(value="/hospitals", method = RequestMethod.DELETE)
public ResponseEntity<String> deleteHospital(@RequestBody Hospital hospital) {
    hospitalService.deleteHospital(hospital);
	return new ResponseEntity<String>("Hospital removed", HttpStatus.NO_CONTENT);
}

}






package com.example.project;
import org.springframework.data.repository.CrudRepository;



public interface HospitalRepository extends CrudRepository<Hospital,Integer> {

}



package com.example.project;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import javax.persistence.*;
import org.springframework.transaction.annotation.Transactional;

@Service
@Transactional
public class HospitalService {
	
	@Autowired
	private HospitalRepository hospitalRepository;

  
public Hospital findHospital(int id) {
    return hospitalRepository.findOne(id);
}
  
public Iterable<Hospital> getAllHospitals(){
    return hospitalRepository.findAll();
}


public void addHospital(Hospital hospital){
   hospitalRepository.save(hospital);
}

public void updateHospital(Hospital hospital){
    hospitalRepository.save(hospital);
}

public void deleteHospital(Hospital hospital) {
  hospitalRepository.delete(hospital);
}
}






package com.example.project;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SpringBoot3Application {

	public static void main(String[] args) {
		SpringApplication.run(SpringBoot3Application.class, args);
	}
}



package com.example.project;

import org.springframework.context.annotation.*;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;

@Configuration
@EnableWebSecurity
public class SpringSecurityConfig extends WebSecurityConfigurerAdapter {

	@Autowired
	private AuthenticationEntryPoint authEntryPoint;


	protected void configure(HttpSecurity http) throws Exception {
		http.csrf().disable().authorizeRequests()
				.anyRequest().authenticated()
				.and().httpBasic()
				.authenticationEntryPoint(authEntryPoint);
	}

	@Autowired
	public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
		auth.inMemoryAuthentication().withUser("username").password("password").roles("USER");
	}
}


